class BattleshipGame {
  constructor(size) {
    this.size = size;
    this.board = this.createBoard();
    this.ships = [];
  }

  createBoard() {
    const board = [];
    for (let row = 0; row < this.size; row++) {
      board.push(Array(this.size).fill(0));
    }
    return board;
  }

  placeShip(ship) {
    if (!this.isValidPosition(ship)) {
      return false;
    }

    for (const { x, y } of ship.coordinates) {
      this.board[x][y] = 1;
    }

    this.ships.push(ship);
    return true;
  }

  isValidPosition(ship) {
    for (const { x, y } of ship.coordinates) {
      if (x < 0 || x >= this.size || y < 0 || y >= this.size || this.board[x][y] === 1) {
        return false;
      }
    }
    return true;
  }

  attack(x, y) {
    if (x < 0 || x >= this.size || y < 0 || y >= this.size) {
      return false;
    }

    const cellValue = this.board[x][y];
    if (cellValue === 1) {
      this.board[x][y] = 2;
      return true;
    } else if (cellValue === 0) {
      this.board[x][y] = 3;
    }
    return false;
  }

  isGameOver() {
    return this.ships.every((ship) => ship.isSunk());
  }
}

class Ship {
  constructor(coordinates) {
    this.coordinates = coordinates;
    this.hits = new Set();
  }

  isSunk() {
    return this.coordinates.every((coord) => this.hits.has(JSON.stringify(coord)));
  }

  hit(x, y) {
    const coordString = JSON.stringify({ x, y });
    this.hits.add(coordString);
  }
}

// Example usage:
const game = new BattleshipGame(10);
const ship1 = new Ship([{ x: 1, y: 1 }, { x: 1, y: 2 }, { x: 1, y: 3 }]);
const ship2 = new Ship([{ x: 5, y: 5 }, { x: 6, y: 5 }, { x: 7, y: 5 }]);
game.placeShip(ship1);
game.placeShip(ship2);
console.log(game.attack(1, 1)); // Hit
console.log(game.attack(2, 1)); // Hit
console.log(game.attack(3, 1)); // Hit
console.log(game.attack(5, 5)); // Hit
console.log(game.attack(6, 6)); // Miss
console.log(game.isGameOver()); // false
ship1.hit(1, 1);
ship1.hit(1, 2);
ship1.hit(1, 3);
console.log(game.isGameOver()); // true
